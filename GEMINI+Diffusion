{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-02T12:51:27.733794Z","iopub.execute_input":"2025-03-02T12:51:27.734162Z","iopub.status.idle":"2025-03-02T12:51:27.738846Z","shell.execute_reply.started":"2025-03-02T12:51:27.734131Z","shell.execute_reply":"2025-03-02T12:51:27.738005Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# Install requirements\n# Install requirements (updated for compatibility)\n!pip install diffusers transformers huggingface_hub\n!pip install google-generativeai opencv-python-headless svgwrite\nimport os\nos.kill(os.getpid(), 9)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-02T12:51:27.740293Z","iopub.execute_input":"2025-03-02T12:51:27.740604Z","execution_failed":"2025-03-02T12:51:37.140Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: diffusers in /usr/local/lib/python3.10/dist-packages (0.31.0)\nRequirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.47.0)\nRequirement already satisfied: huggingface_hub in /usr/local/lib/python3.10/dist-packages (0.29.0)\nRequirement already satisfied: importlib-metadata in /usr/local/lib/python3.10/dist-packages (from diffusers) (8.5.0)\nRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from diffusers) (3.17.0)\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from diffusers) (1.26.4)\nRequirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from diffusers) (2024.11.6)\nRequirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from diffusers) (2.32.3)\nRequirement already satisfied: safetensors>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from diffusers) (0.4.5)\nRequirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from diffusers) (11.0.0)\nRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.2)\nRequirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.2)\nRequirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.21.0)\nRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.67.1)\nRequirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub) (2024.12.0)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub) (4.12.2)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy->diffusers) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy->diffusers) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy->diffusers) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy->diffusers) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy->diffusers) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy->diffusers) (2.4.1)\nRequirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata->diffusers) (3.21.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->diffusers) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->diffusers) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->diffusers) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->diffusers) (2025.1.31)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->diffusers) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->diffusers) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy->diffusers) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy->diffusers) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy->diffusers) (2024.2.0)\nRequirement already satisfied: google-generativeai in /usr/local/lib/python3.10/dist-packages (0.8.3)\nRequirement already satisfied: opencv-python-headless in /usr/local/lib/python3.10/dist-packages (4.10.0.84)\nRequirement already satisfied: svgwrite in /usr/local/lib/python3.10/dist-packages (1.4.3)\nRequirement already satisfied: google-ai-generativelanguage==0.6.10 in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (0.6.10)\nRequirement already satisfied: google-api-core in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (1.34.1)\nRequirement already satisfied: google-api-python-client in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (2.155.0)\nRequirement already satisfied: google-auth>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (2.27.0)\nRequirement already satisfied: protobuf in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (3.20.3)\nRequirement already satisfied: pydantic in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (2.11.0a2)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (4.67.1)\nRequirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from google-generativeai) (4.12.2)\nRequirement already satisfied: proto-plus<2.0.0dev,>=1.22.3 in /usr/local/lib/python3.10/dist-packages (from google-ai-generativelanguage==0.6.10->google-generativeai) (1.25.0)\nRequirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.10/dist-packages (from opencv-python-headless) (1.26.4)\nRequirement already satisfied: googleapis-common-protos<2.0dev,>=1.56.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core->google-generativeai) (1.66.0)\nRequirement already satisfied: requests<3.0.0dev,>=2.18.0 in /usr/local/lib/python3.10/dist-packages (from google-api-core->google-generativeai) (2.32.3)\nRequirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth>=2.15.0->google-generativeai) (5.5.0)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth>=2.15.0->google-generativeai) (0.4.1)\nRequirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth>=2.15.0->google-generativeai) (4.9)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.21.2->opencv-python-headless) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.21.2->opencv-python-headless) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.21.2->opencv-python-headless) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.21.2->opencv-python-headless) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.21.2->opencv-python-headless) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.21.2->opencv-python-headless) (2.4.1)\nRequirement already satisfied: httplib2<1.dev0,>=0.19.0 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client->google-generativeai) (0.22.0)\nRequirement already satisfied: google-auth-httplib2<1.0.0,>=0.2.0 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client->google-generativeai) (0.2.0)\nRequirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client->google-generativeai) (4.1.1)\nRequirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic->google-generativeai) (0.7.0)\nRequirement already satisfied: pydantic-core==2.29.0 in /usr/local/lib/python3.10/dist-packages (from pydantic->google-generativeai) (2.29.0)\nRequirement already satisfied: grpcio<2.0dev,>=1.33.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-ai-generativelanguage==0.6.10->google-generativeai) (1.68.1)\nRequirement already satisfied: grpcio-status<2.0dev,>=1.33.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-ai-generativelanguage==0.6.10->google-generativeai) (1.48.2)\nRequirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.10/dist-packages (from httplib2<1.dev0,>=0.19.0->google-api-python-client->google-generativeai) (3.2.0)\nRequirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=2.15.0->google-generativeai) (0.6.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core->google-generativeai) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core->google-generativeai) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core->google-generativeai) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core->google-generativeai) (2025.1.31)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.21.2->opencv-python-headless) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.21.2->opencv-python-headless) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.21.2->opencv-python-headless) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.21.2->opencv-python-headless) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.21.2->opencv-python-headless) (2024.2.0)\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"# Import necessary packages\nimport numpy as np\nimport pandas as pd\nimport os\nimport torch\nfrom diffusers import StableDiffusionPipeline\nimport google.generativeai as genai\nfrom PIL import Image\nimport cv2\nimport svgwrite\nimport matplotlib.pyplot as plt\nfrom IPython.display import display, HTML\n# Check CUDA availability\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nprint(f\"Using device: {device}\")\n\ndef setup_pipeline():\n    try:\n        # Load the Stable Diffusion model\n        model_id = \"CompVis/stable-diffusion-v1-4\"  # Using the same model as the example\n        pipe = StableDiffusionPipeline.from_pretrained(model_id)\n        pipe = pipe.to(device)\n        return pipe\n    except Exception as e:\n        print(f\"Error setting up pipeline: {e}\")\n        return None\n\ndef generate_prompts(theme, num_images):\n    try:\n        model = genai.GenerativeModel('models/gemini-1.5-flash-8b')\n        prompt_request = f\"\"\"\n        Generate {num_images} unique prompts for simple, clean clipart of {theme}.\n        Requirements:\n        - Must be extremely simple and minimal\n        - Pure white background\n        - Single subject, no complex scenes\n        - Flat 2D style like professional clipart\n        - No textures or gradients\n        - Think Microsoft clipart or simple vector icons\n        \"\"\"\n        response = model.generate_content(prompt_request)\n        if response.text:\n            prompts = response.text.strip().split('\\n')\n            return [p for p in prompts if p.strip()][:num_images]\n    except Exception as e:\n        print(f\"Error generating prompts: {e}\")\n        return [f\"minimal flat icon of {theme}, simple black lines on white background\"] * num_images\n\ndef generate_and_process_image(pipe, prompt):\n    try:\n        # Generate image\n        with torch.no_grad():\n            base_prompt = \"line art, simple clean lines, white background, professional vector style, minimalist design, \"\n            image = pipe(base_prompt + prompt).images[0]\n            \n        # Process image\n        image_processed = process_image(image)\n        \n        # Display image using matplotlib\n        plt.figure(figsize=(8, 8))\n        plt.imshow(image_processed)\n        plt.axis('off')\n        plt.show()\n        \n        return image_processed\n    except Exception as e:\n        print(f\"Error generating image: {e}\")\n        return None\n\ndef process_image(image):\n    # Convert to RGBA\n    image = image.convert('RGBA')\n    \n    # Remove background\n    data = np.array(image)\n    r, g, b, a = data.T\n    white_areas = (r > 230) & (g > 230) & (b > 230)\n    data[..., 3][white_areas.T] = 0\n    \n    # Convert to black and white\n    black_mask = ~white_areas.T\n    data[black_mask] = [0, 0, 0, 255]\n    \n    return Image.fromarray(data)\n\ndef convert_to_svg(image):\n    # Convert to OpenCV format\n    opencv_image = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)\n    gray = cv2.cvtColor(opencv_image, cv2.COLOR_BGR2GRAY)\n    _, binary = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n    contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    \n    # Create SVG\n    dwg = svgwrite.Drawing(size=(image.width, image.height))\n    dwg.add(dwg.rect(insert=(0, 0), size=('100%', '100%'), fill='white'))\n    \n    for contour in contours:\n        points = [(point[0][0], point[0][1]) for point in contour]\n        if len(points) > 2:\n            path_data = f\"M {points[0][0]},{points[0][1]}\"\n            for x, y in points[1:]:\n                path_data += f\" L {x},{y}\"\n            path_data += \" Z\"\n            dwg.add(dwg.path(d=path_data, fill='black'))\n    \n    return dwg.tostring()\n\ndef main():\n    try:\n        # Get user inputs\n        theme = input(\"Enter theme (e.g., 'bird', 'cat', 'house'): \")\n        num_images = int(input(\"Enter number of images to generate: \"))\n        gemini_api_key = \"AIzaSyDEF7GALcUTddbPB2qNVQ-l6cvnxG20RFM\"\n        \n        # Configure Gemini\n        genai.configure(api_key=gemini_api_key)\n        \n        # Setup pipeline\n        print(\"Setting up Stable Diffusion pipeline...\")\n        pipe = setup_pipeline()\n        if pipe is None:\n            return\n        \n        # Generate images\n        prompts = generate_prompts(theme, num_images)\n        for i, prompt in enumerate(prompts):\n            print(f\"\\nGenerating image {i+1}/{num_images}\")\n            print(f\"Prompt: {prompt}\")\n            \n            # Generate and process image\n            image = generate_and_process_image(pipe, prompt)\n            if image is None:\n                continue\n                \n            # Save images\n            image.save(f'/kaggle/working/clipart_{i}.png')\n            \n            # Convert to SVG\n            svg_content = convert_to_svg(image)\n            with open(f'/kaggle/working/clipart_{i}.svg', 'w') as f:\n                f.write(svg_content)\n                \n            print(f\"Saved PNG and SVG versions of image {i+1}\")\n            \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n    finally:\n        print(\"\\nProcess completed!\")\n\nif __name__ == \"__main__\":\n    main()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-02T12:51:48.519656Z","iopub.execute_input":"2025-03-02T12:51:48.520133Z","iopub.status.idle":"2025-03-02T12:53:03.075744Z","shell.execute_reply.started":"2025-03-02T12:51:48.520072Z","shell.execute_reply":"2025-03-02T12:53:03.074945Z"}},"outputs":[{"name":"stdout","text":"Using device: cuda\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Enter theme (e.g., 'bird', 'cat', 'house'):  dog\nEnter number of images to generate:  2\n"},{"name":"stdout","text":"Setting up Stable Diffusion pipeline...\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Loading pipeline components...:   0%|          | 0/7 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"66369a832bd5412c9337bca0b20e4059"}},"metadata":{}},{"name":"stdout","text":"\nGenerating image 1/2\nPrompt: 1. **Prompt 1:**  \"Simple, clean clipart of a dog, side profile view, facing right.  Flat design, pure white background, minimal lines and shapes,  dog breed not specified.\"\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"eb2f9950032141a2b1436a87e0652f5f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x800 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Saved PNG and SVG versions of image 1\n\nGenerating image 2/2\nPrompt: 2. **Prompt 2:** \"Vector illustration of a dog,  standing in a neutral pose,  head and body only.  Pure white background.  Two-dimensional, minimalist style, dog breed not specified.\"\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/50 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a64405a1adb24c52aacc6ac832423657"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x800 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Saved PNG and SVG versions of image 2\n\nProcess completed!\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"\n#gemini_api_key = \"AIzaSyDEF7GALcUTddbPB2qNVQ-l6cvnxG20RFM\"\n","metadata":{"trusted":true,"execution":{"execution_failed":"2025-03-02T12:51:37.141Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import google.generativeai as genai\n\n# Configure Gemini with your API key\ngenai.configure(api_key=\"AIzaSyDEF7GALcUTddbPB2qNVQ-l6cvnxG20RFM\")\n\n# List available models\nfor m in genai.list_models():\n    print(f\"Model name: {m.name}\")\n    print(f\"Display name: {m.display_name}\")\n    print(f\"Description: {m.description}\")\n    print(f\"Generation methods: {m.supported_generation_methods}\")\n    print(\"-\" * 80)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-03-02T12:51:37.141Z"}},"outputs":[],"execution_count":null}]}